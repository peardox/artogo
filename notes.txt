Pytorch
https://pytorch.org/get-started/locally/
https://github.com/pyscripter/python4delphi
https://github.com/Embarcadero/PythonEnviroments
https://github.com/Embarcadero/P4D-Data-Sciences

FNS
https://github.com/pytorch/examples/tree/main/fast_neural_style
https://github.com/rrmina/fast-neural-style-pytorch
https://michhar.github.io/convert-pytorch-onnx/#a-pre-trained-model-from-torchvision
https://pytorch.org/tutorials/advanced/neural_style_tutorial.html

Preserve colour
https://github.com/jimmyyhwu/style-transfer

Nets
Vgg16 - https://uk.mathworks.com/help/deeplearning/ref/vgg16.html
Vgg19 - https://uk.mathworks.com/help/deeplearning/ref/vgg19.html
ONNX - https://github.com/onnx/models

https://github.com/ysh329/deep-learning-model-convertor

Money
https://www.lastweekinaws.com/blog/how-to-get-free-aws-credits-4-tactics-to-use/

App

https://github.com/pyscripter/python4delphi/issues/144
https://stackoverflow.com/questions/36132350/install-python-wheel-file-without-using-pip
https://blogs.embarcadero.com/put-ai-in-your-app-to-make-fast-style-art/
https://github.com/brunomileto/deepai_api
https://www.youtube.com/watch?v=7G_geIOTTiw
https://github.com/ifueko/arbitrary-neural-style-transfer

Torch
https://download.pytorch.org/whl/torch/torch-1.11.0+cpu-cp39-cp39-linux_x86_64.whl
https://download.pytorch.org/whl/torch/torch-1.11.0+cu113-cp39-cp39-linux_x86_64.whl
https://download.pytorch.org/whl/torch/torch-1.11.0+cpu-cp39-cp39-win_amd64.whl
https://download.pytorch.org/whl/torch/torch-1.11.0+cu113-cp39-cp39-win_amd64.whl

TorchVision
https://download.pytorch.org/whl/cpu/torchvision-0.12.0%2Bcpu-cp39-cp39-linux_x86_64.whl
https://download.pytorch.org/whl/cu113/torchvision-0.12.0%2Bcu113-cp39-cp39-linux_x86_64.whl
https://download.pytorch.org/whl/cpu/torchvision-0.12.0%2Bcpu-cp39-cp39-win_amd64.whl
https://download.pytorch.org/whl/cu113/torchvision-0.12.0%2Bcu113-cp39-cp39-win_amd64.whl

TorchAudio


https://github.com/jimmckeeth/SkiaSimpleShaderViewer
https://github.com/skia4delphi/skia4delphi

NST
https://pytorch.org/tutorials/advanced/neural_style_tutorial.html
https://medium.com/@shwetaka1988/a-complete-step-wise-guide-on-neural-style-transfer-9f60b22b4f75

SQLite
https://www.sqlitetutorial.net/sqlite-python/insert/


Ubuntu 20.04
sudo apt-get update
sudo apt-get install python3 python-is-python3 build-essential cmake ninja-build
wget https://bootstrap.pypa.io/get-pip.py
python get-pip.py
echo -e "\nexport PATH=$HOME/.local/bin:\$PATH\n" >> ~/.bashrc
source ~/.bashrc
# Sanity check
pip list
git clone https://github.com/peardox/artogo.git
cd artogo
pip install -r requirements.txt

pip install torch pynvml psutil

Snippets

import torch
import pynvml

torch.cuda.is_available()
torch.cuda.device_count()
torch.cuda.get_arch_list()
for x in range(torch.cuda.device_count()):
	torch.cuda.get_device_capability(x)
	torch.cuda.get_device_name(x)
	torch.cuda.get_device_properties(x)
	torch.cuda.memory_usage(x)
	
devtype = torch.cuda.is_available()
device = torch.device("cuda" if devtype else "cpu")

t = device.get_device_properties(0).total_memory
r = device.memory_reserved(0)
a = device.memory_allocated(0)
f = r-a  # free inside reserved
print("Free : ", f, "Reserved : ", r, "Allocated : ", a, "Total : ", t)

Logged  => Free :  4200542720 Reserved :  5685379072 Allocated :  1484836352 Total :  6441926656

6441926656 - 5685379072 = 756,547,584

import psutil
mem = psutil.virtual_memory()
mem.total # total
mem.available # free
mem.percent # percent used

Linux
svmem(total=4097744896, available=2841841664, percent=30.6, used=909299712, free=1905729536, active=962273280, inactive=866078720, buffers=179179520, cached=1103536128, shared=71720960, slab=230019072)

Win
svmem(total=16559382528, available=9123405824, percent=44.9, used=7435976704, free=9123405824)

1024
1152
1280
1408
1536
1664
1792
1920
2048

PS C:\git\artogo> .\tr.cmd 1.0e10 wall_1280x720 vgg16 1010 256 8
Traceback (most recent call last):
  File "C:\git\artogo\neural_style\neural_style.py", line 276, in <module>
    main()
  File "C:\git\artogo\neural_style\neural_style.py", line 263, in main
    train(args)
  File "C:\git\artogo\neural_style\neural_style.py", line 84, in train
    features_y = vgg(y)
  File "C:\Users\simon\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\git\artogo\neural_style\vgg.py", line 30, in forward
    h = self.slice2(h)
  File "C:\Users\simon\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\simon\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\container.py", line 141, in forward
    input = module(input)
  File "C:\Users\simon\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\simon\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\conv.py", line 447, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "C:\Users\simon\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\conv.py", line 443, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
RuntimeError: CUDA out of memory. Tried to allocate 64.00 MiB (GPU 0; 6.00 GiB total capacity; 5.26 GiB already allocated; 0 bytes free; 5.31 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
PS C:\git\artogo>


.\tr.cmd 1.0e10 wall_1024x576_e4 vgg16 1010 256 6
.\tr.cmd 1.0e10 Candice_Swanepoel vgg16 1010 128 4

.\tr.cmd 1.0e10 quilt_512 vgg16 1010 256 8
.\tr.cmd 1.0e10 quilt_1024 vgg16 1010 256 6

Model
Done, trained model saved at models\mosaic-vgg16-1010-512.pth
Elapsed time = 4 hours 58 mins 37 secs

Render Movie
Elapsed time = 0 hours 11 mins 9 secs

ffmpeg -i %04d.jpg ../sunrise.mp4

.\tr.cmd 1.0e10 wall_1024x576_e4l vgg16 1010 256 6

pip install python-dotenv

http://aws.amazon.com/contact-us/ec2-request

sudo apt-get update
sudo apt-get dist-upgrade
sudo apt-get install python3 python3-pip python-is-python3 tuptime
echo -e "\nexport PATH=$HOME/.local/bin:\$PATH\n" >> ~/.bashrc
source ~/.bashrc
git clone https://github.com/peardox/artogo.git
cd artogo
wget https://peardox.com/downloads/train-256.tgz
tar zxf train-256.tar.gz
pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113
pip install -r requirements-gpu.txt
sudo reboot

wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda-repo-ubuntu2204-11-7-local_11.7.0-515.43.04-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu2204-11-7-local_11.7.0-515.43.04-1_amd64.deb
sudo cp /var/cuda-repo-ubuntu2204-11-7-local/cuda-*-keyring.gpg /usr/share/keyrings/
sudo apt-get update
sudo apt-get -y install cuda
 
sudo reboot
 
 
python neural_style/neural_style.py train --net vgg16 --model-name dae-mosaic-vgg16-1010-256 --image-size 256 --style-weight 1.0e10 --style-image style-images/dae-mosaic.jpg --save-model-dir models --epochs 1 --logfile logs\dae-mosaic-vgg16-1010-256.log

python neural_style/neural_style.py train --net vgg16 --model-name rnd-mosaic_1-vgg16-1010-256 --image-size 256 --style-weight 1.0e10 --style-image /dae/batch/400/noise_mosaic_1.png --save-model-dir models --epochs 1 --logfile logs\rnd-mosaic_1-vgg16-1010-256.log --limit 40000 --batch-size 4


sudo fdisk /dev/nvme1n1
sudo mkfs.ext3 /dev/nvme1n1p1
mkdir space
sudo mount /dev/nvme1n1p1 space
sudo chown -R ubuntu.ubuntu /home/ubuntu/space
wget https://peardox.com/downloads/train.tar.gz


.\tr.cmd 1.0e10 pebble_1920 vgg16 1010 256 3
Done, trained model saved at models\pebble_1920-vgg16-1010-256.pth
Elapsed time = 5236.149935 secs
Elapsed time = 1 hours 27 mins 16 secs

.\tr.cmd 1.0e10 pebble_2 vgg16 1010 256 6
Done, trained model saved at models\pebble_2-vgg16-1010-256.pth
Elapsed time = 4780.199898 secs
Elapsed time = 1 hours 19 mins 40 secs

.\tr.cmd 5.0e09 pebble_3 vgg16 0950 256 8
Done, trained model saved at models\pebble_3-vgg16-0950-256.pth
Elapsed time = 4544.413557 secs
Elapsed time = 1 hours 15 mins 44 secs

.\tr.cmd 5.0e10 pebble_4 vgg16 1050 256 10
Done, trained model saved at models\pebble_4-vgg16-1050-256.pth
Elapsed time = 4639.447968 secs
Elapsed time = 1 hours 17 mins 19 secs

.\tr.cmd 1.0e09 pebble_4 vgg16 0910 256 10 --limit 20


python neural_style/neural_style.py train --ignore-gpu 1 --net vgg16 --model-name convergence-vgg16-1010-256 --image-size 256 --style-weight 1.0e10 --style-image style-images/convergence.jpg --save-model-dir models --epochs 5 --logfile logs/convergence-vgg16-1010-256.log

CUDA Available :  True
CUDA Devices :  1
CUDA Arch List :  ['sm_37', 'sm_50', 'sm_60', 'sm_70', 'sm_75', 'sm_80', 'sm_86']
CUDA Capabilities :  (8, 6)
CUDA Device Name :  NVIDIA A10G
CUDA Device Memory :  (23423418368, 23683137536)
CUDA Device Properties :  _CudaDeviceProperties(name='NVIDIA A10G', major=8, minor=6, total_memory=22586MB, multi_processor_count=80)
GPU Support :  1

System startups:        6  since  09:14:45 06/02/22
System shutdowns:       5 ok  +  0 bad
System life:            2d 3h 56m 34s

System uptime:          2.04%  =  1h 3m 38s
System downtime:        97.96%  =  2d 2h 52m 56s

Average uptime:         10m 36s
Average downtime:       10h 10m 35s

Current uptime:         1m 56s  since  13:09:23 06/04/22

=== Test scripts ===

import sys

for p in sys.path:
    print(p)

=== Test scripts ===

import torch

gpu_supported = 0
try:
    torch.cuda.init()
    if(torch.cuda.is_available()):
        gpu_supported = 1
        print("CUDA Available : ",torch.cuda.is_available())
        print("CUDA Devices : ",torch.cuda.device_count())
        print("CUDA Arch List : ",torch.cuda.get_arch_list())
        for x in range(torch.cuda.device_count()):
            print("CUDA Capabilities : ",torch.cuda.get_device_capability(x))
            print("CUDA Device Name : ",torch.cuda.get_device_name(x))
            print("CUDA Device Memory : ",torch.cuda.mem_get_info(x))
            print("CUDA Device Properties : ",torch.cuda.get_device_properties(x))
            print(torch.cuda.memory_summary(x))
except:
    print("No supported GPUs detected")


print("GPU Support : ", gpu_supported);

=== Test scripts ===

AWS Activate vs AWS Startup Loft Accelerator

=======================
pip list --format json

import sys
for p in sys.path:
    print(p)
